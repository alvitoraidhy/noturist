import { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/router";
import toast from "react-hot-toast";
import Head from "next/head";
import axios from "axios";

import Footer from "../../../components/Footer";

import type { Dispatch, SetStateAction } from "react";
import type { AxiosError } from "axios";
import type { NextPage } from "next";

type Props = {
  token: string;
  setToken: Dispatch<SetStateAction<string>>;
};

const DeleteNote: NextPage<Props> = ({ token, setToken }) => {
  const router = useRouter();

  const { noteId: id } = router.query;

  const [title, setTitle] = useState("");

  const submitCallback = useCallback(async () => {
    toast.loading("Deleting the note...", { id: "deleteNote" });

    try {
      const resp = await axios.delete(`${process.env.API_URL}/notes/${id}`, {
        headers: { Authorization: token },
      });

      toast.success("Successfully deleted the note!", { id: "deleteNote" });
      router.push("/dashboard");
    } catch (err: unknown | AxiosError) {
      let message = "";

      if (axios.isAxiosError(err) && err.response) {
        switch (err.response.status) {
          case 404:
            message = "note does not exist or inaccessible";
            router.push("/dashboard");
            break;

          case 401:
            message = "invalid session";
            setToken("");
            break;

          default:
            message = "unknown error";
        }
      } else {
        message = "unknown error";
      }

      toast.error(`Failed to delete the note: ${message}`, {
        id: "deleteNote",
      });
    }
  }, [id, title, token]);

  useEffect(() => {
    if (!token) router.push("/");
  }, [token]);

  useEffect(() => {
    if (token) {
      const getData = async () => {
        try {
          type Response = {
            title: string;
            body: string;
          };

          const resp = await axios.get<Response>(
            `${process.env.API_URL}/notes/${id}`,
            {
              headers: { Authorization: token },
            }
          );

          setTitle(resp.data.title);
        } catch (err: unknown | AxiosError) {
          let message = "";

          if (axios.isAxiosError(err) && err.response) {
            switch (err.response.status) {
              case 404:
                message = "note does not exist or inaccessible";
                router.push("/dashboard");
                break;

              case 401:
                message = "invalid session";
                setToken("");
                break;

              default:
                message = "unknown error";
            }
          } else {
            message = "unknown error";
          }

          toast.error(`Something went wrong: ${message}`, {
            id: "deleteNote",
          });
        }
      };

      getData();
    }
  }, [id, token]);

  return (
    <>
      <Head>
        <title>Delete note | Journal App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-vh-100 d-flex flex-column bg-light">
        <main className="container px-3 py-5 mt-auto">
          <div className="row g-4">
            <div className="col-12 d-flex flex-column align-items-center justify-content-center">
              <div className="card p-3 w-100" style={{ maxWidth: "900px" }}>
                <div className="card-body container">
                  <div className="row g-3">
                    <div className="col">
                      <h2 className="card-title m-0">Delete Note</h2>
                    </div>
                  </div>
                  <hr />
                  <p>Are you sure you want to delete this note?</p>
                  <p>
                    <strong>Note title: </strong>
                    <em>&quot;{title}&quot;</em>
                  </p>
                  <button
                    type="button"
                    className="btn btn-danger"
                    onClick={submitCallback}
                  >
                    Confirm
                  </button>
                </div>
              </div>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    </>
  );
};

export default DeleteNote;

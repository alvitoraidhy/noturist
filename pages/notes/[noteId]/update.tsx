import { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/router";
import toast from "react-hot-toast";
import Head from "next/head";
import axios from "axios";

import Footer from "../../../components/Footer";

import type { Dispatch, SetStateAction } from "react";
import type { AxiosError } from "axios";
import type { NextPage } from "next";

type Props = {
  token: string;
  setToken: Dispatch<SetStateAction<string>>;
};

const UpdateNote: NextPage<Props> = ({ token, setToken }) => {
  const router = useRouter();

  const { noteId: id } = router.query;

  const [isLoading, setLoadingStatus] = useState<boolean>(true);
  const [title, setTitle] = useState<string>("");
  const [body, setBody] = useState<string>("");

  const submitCallback = useCallback(async () => {
    setLoadingStatus(true);
    toast.loading("Submitting the updated note...", { id: "updateNote" });

    try {
      const resp = await axios.put(
        `${process.env.API_URL}/notes/${id}`,
        {
          title: title,
          body: body,
        },
        {
          headers: { Authorization: token },
        }
      );
      toast.success("Successfully updated the note!", { id: "updateNote" });
      router.push("/dashboard");
    } catch (err: unknown | AxiosError) {
      let message = "";

      if (axios.isAxiosError(err) && err.response) {
        switch (err.response.status) {
          case 422:
            message = "request is not valid";
            break;

          case 404:
            message = "note does not exist or inaccessible";
            router.push("/dashboard");
            break;

          case 401:
            message = "invalid session";
            setToken("");
            break;

          default:
            message = "unknown error";
        }
      } else {
        message = "unknown error";
      }

      toast.error(`Failed to update the note: ${message}`, {
        id: "updateNote",
      });
    } finally {
      setLoadingStatus(false);
    }
  }, [id, title, body, token]);

  useEffect(() => {
    if (!token) router.push("/");
  }, [token]);

  useEffect(() => {
    if (token) {
      const getData = async () => {
        try {
          type Response = {
            title: string;
            body: string;
          };

          const resp = await axios.get<Response>(
            `${process.env.API_URL}/notes/${id}`,
            { headers: { Authorization: token } }
          );

          setTitle(resp.data.title);
          setBody(resp.data.body);
          setLoadingStatus(false);
        } catch (err: unknown | AxiosError) {
          let message = "";

          if (axios.isAxiosError(err) && err.response) {
            switch (err.response.status) {
              case 404:
                message = "note does not exist or inaccessible";
                router.push("/dashboard");
                break;

              case 401:
                message = "invalid session";
                setToken("");
                break;

              default:
                message = "unknown error";
            }
          } else {
            message = "unknown error";
          }

          toast.error(`Something went wrong: ${message}`, {
            id: "updateNote",
          });
        }
      };

      getData();
    }
  }, [id, token]);

  return (
    <>
      <Head>
        <title>Update note | Journal App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-vh-100 d-flex flex-column bg-light">
        <main className="container px-3 py-5 mt-auto">
          <div className="row g-4">
            <div className="col-12 d-flex flex-column align-items-center justify-content-center">
              <div className="card p-3 w-100" style={{ maxWidth: "900px" }}>
                <div className="card-body container">
                  <div className="row g-3">
                    <div className="col">
                      <h2 className="card-title m-0">Update Note</h2>
                    </div>
                  </div>
                  <hr />
                  <form action="">
                    <div className="mb-3">
                      <label htmlFor="title" className="form-label fw-bold">
                        Note title
                      </label>
                      <input
                        type="text"
                        className="form-control"
                        id="title"
                        placeholder="How to make an omelette"
                        onChange={(e) => setTitle(e.target.value)}
                        value={title}
                        disabled={isLoading}
                      />
                      <div id="titleHelp" className="form-text">
                        ({title ? title.length : 0}/255)
                      </div>
                    </div>
                    <div className="mb-3">
                      <label htmlFor="username" className="form-label fw-bold">
                        Note body
                      </label>
                      <textarea
                        className="form-control font-monospace"
                        id="body"
                        onChange={(e) => setBody(e.target.value)}
                        value={body}
                        disabled={isLoading}
                      />
                      <div id="bodyHelp" className="form-text">
                        {body ? body.length : 0} character(s)
                      </div>
                    </div>
                    <button
                      type="button"
                      className="btn btn-primary"
                      onClick={submitCallback}
                    >
                      Submit
                    </button>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    </>
  );
};

export default UpdateNote;

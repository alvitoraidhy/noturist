import { useState, useEffect, useCallback } from "react";
import Skeleton from "react-loading-skeleton";
import { useRouter } from "next/router";
import toast from "react-hot-toast";
import Image from "next/image";
import Head from "next/head";
import axios from "axios";

import Footer from "../components/Footer";

import type { Dispatch, SetStateAction } from "react";
import type { AxiosError } from "axios";
import type { NextPage } from "next";

import CreateNote from "../components/CreateNote";

type Props = {
  token: string;
  setToken: Dispatch<SetStateAction<string>>;
};

const Dashboard: NextPage<Props> = ({ token, setToken }) => {
  const router = useRouter();

  const [profile, setProfile] = useState<{ username?: string }>({});
  const [notes, setNotes] = useState<
    { id: number; title: string; body: string }[]
  >([]);

  const refreshCallback = useCallback(async () => {
    try {
      type Response = {
        id: number;
        title: string;
        body: string;
      }[];

      const resp = await axios.get<Response>(`${process.env.API_URL}/notes/`, {
        headers: { Authorization: token },
      });

      setNotes(resp.data);
    } catch (err: unknown | AxiosError) {
      let message = "";

      if (axios.isAxiosError(err) && err.response) {
        switch (err.response.status) {
          case 401:
            message = "invalid session";
            setToken("");
            break;

          default:
            message = "unknown error";
        }
      } else {
        message = "unknown error";
      }

      toast.error(`Error while retrieving notes: ${message}`, {
        id: "dashboard",
      });
    }
  }, [token]);

  const logoutCallback = useCallback(async () => {
    toast.loading("Logging out...", { id: "logout" });

    try {
      setToken("");
      toast.success("Logged out successfully.", { id: "logout" });
    } catch (err: any) {
      toast.error(`Error while logging out: ${err.toString()}`, {
        id: "logout",
      });
    }
  }, []);

  useEffect(() => {
    if (!token) router.push("/");
  }, [token]);

  useEffect(() => {
    if (token) {
      const getData = async () => {
        try {
          type Response = { username: string };

          const resp = await axios.get<Response>(
            `${process.env.API_URL}/auth/current`,
            {
              headers: { Authorization: token },
            }
          );

          setProfile(resp.data);
        } catch (err: unknown | AxiosError) {
          let message = "";

          if (axios.isAxiosError(err) && err.response) {
            switch (err.response.status) {
              case 401:
                message = "invalid session";
                setToken("");
                break;

              default:
                message = "unknown error";
            }
          } else {
            message = "unknown error";
          }

          toast.error(`Something went wrong: ${message}`, {
            id: "dashboard",
          });
        }
      };

      getData();
    }
  }, [token]);

  useEffect(() => {
    if (token) refreshCallback();
  }, [token, refreshCallback]);

  return (
    <>
      <Head>
        <title>Dashboard | Journal App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-vh-100 d-flex flex-column bg-light">
        <nav className="nav fixed-top bg-white d-flex flex-row align-items-center justify-content-between px-5 py-3 shadow-sm">
          <h1 className="text-center h4 m-0">
            Noturist
          </h1>
          <button
            type="button"
            className="btn btn-danger"
            onClick={logoutCallback}
          >
            <i className="fas fa-sign-out-alt"></i> Logout
          </button>
        </nav>
        <main className="container mt-5 px-3 py-5">
          <div className="row g-4">
            <div className="col-12 d-flex flex-column align-items-center justify-content-center">
              <div className="container h-100 d-flex flex-column">
                <div className="row g-3">
                  <div className="col">
                    <h2 className="card-title m-0">{profile ? `${profile.username}'s notes` : <Skeleton />}</h2>
                  </div>
                  <div className="col d-flex justify-content-end">
                    <CreateNote
                      token={token}
                      refreshCallback={refreshCallback}
                      setToken={setToken}
                    />
                    <button
                      className="btn btn-success"
                      onClick={refreshCallback}
                    >
                      <i className="fas fa-sync-alt"></i>
                      <span className="visually-hidden">Refresh notes</span>
                    </button>
                  </div>
                </div>
                <hr />
                {notes.length ? (
                  <div className="row g-3">
                    {notes.map((note) => (
                      <div className="col-xs-12 col-sm-auto" key={note.id}>
                        <div className="card shadow-sm">
                          <div className="card-header fw-bold d-flex">
                            <div className="me-auto">
                              <h3 className="h5 my-1">{note.title}</h3>
                            </div>
                            <div className="ms-3 d-flex">
                              <button
                                className="btn btn-light me-1"
                                onClick={() =>
                                  router.push(`/notes/${note.id}/update`)
                                }
                              >
                                <i className="fas fa-edit" />
                              </button>
                              <button
                                className="btn btn-light"
                                onClick={() =>
                                  router.push(`/notes/${note.id}/delete`)
                                }
                              >
                                <i className="fas fa-times" />
                              </button>
                            </div>
                          </div>
                          <div
                            className="card-body overflow-auto"
                            style={{ maxHeight: "20rem" }}
                          >
                            <p
                              className="card-text font-monospace"
                              style={{ whiteSpace: "pre-wrap" }}
                            >
                              {note.body}
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center mt-5">
                    <Image
                        alt="No Notes"
                        src="/assets/images/undraw_no_data_re_kwbl.svg"
                        width="200px"
                        height="200px"
                      />
                    <p className="card-text">
                      There is no note to display yet. How about creating one?
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    </>
  );
};

export default Dashboard;
